package laborator5_1;

import java.io.BufferedReader;
import java.io.IOException;
import java.io.InputStreamReader;
import java.util.ArrayList;
import java.util.Calendar;
import java.util.HashSet;
import java.util.Iterator;
import java.util.List;
import java.util.Scanner;
import java.util.Set;
import java.util.Vector;

interface Operatiuni{
	public float calculeaza_dobanda();
	public float actualizare_suma();
	public void depunere(float suma);
	public void extragere (float suma);

}

class ContBancar implements Operatiuni{
	String numarCont;
	double suma;
	String moneda;
	Calendar data_inscrierii;
	Calendar data_ultimei_operatiuni;
	public ContBancar(String numarCont, double suma, String moneda) {
		super();
		this.numarCont = numarCont;
		this.suma = suma;
		this.moneda = moneda;
		this.data_inscrierii.getInstance();
		this.data_ultimei_operatiuni.getInstance();
	}

	public String getNumarCont() {
		return numarCont;
	}

	public double getSuma() {
		return suma;
	}

	public String getMoneda() {
		return moneda;
	}

	public Calendar getData_inscrierii() {
		return data_inscrierii;
	}

	public Calendar getData_ultimei_operatiuni() {
		return data_ultimei_operatiuni;
	}

	public void setNumarCont(String numarCont) {
		this.numarCont = numarCont;
	}

	public void setSuma(double suma) {
		this.suma = suma;
	}

	public void setMoneda(String moneda) {
		this.moneda = moneda;
	}

	public void setData_inscrierii(Calendar data_inscrierii) {
		this.data_inscrierii = data_inscrierii;
	}

	public void setData_ultimei_operatiuni(Calendar data_ultimei_operatiuni) {
		this.data_ultimei_operatiuni = data_ultimei_operatiuni;
	}

	@Override
	public String toString(){
		return "Numar cont: "+numarCont+"  Suma:"+suma+"  Moneda:"+moneda+" ";
	}
	////////////////////////////////////////////////////////
	
	public float calculeaza_dobanda() {
		if(this.getMoneda()=="RON"||this.getMoneda()=="ron"||this.getMoneda()=="Ron") {
			int nr_zile=(int) (this.data_inscrierii.getTimeInMillis()-this.data_ultimei_operatiuni.getTimeInMillis())/86400000;
			if(this.getSuma()<500)
				return (float) (nr_zile*0.3);
			else if(this.getSuma()>=500)
				return (float) (nr_zile*0.8);
		}
		else if(this.getMoneda()=="EUR"||this.getMoneda()=="eur"||this.getMoneda()=="Eur") {
			int nr_zile=(int) (this.data_inscrierii.getTimeInMillis()-this.data_ultimei_operatiuni.getTimeInMillis())/86400000;
			return (float) (nr_zile*0.1);
		}
		return 333;
	}
	public float actualizare_suma() {
		this.suma+=this.calculeaza_dobanda();
		this.setData_ultimei_operatiuni(Calendar.getInstance());
		return (float) getSuma();
	}
	public void depunere(float suma) {
		setSuma(this.getSuma()+suma);
		this.setData_ultimei_operatiuni(Calendar.getInstance());
	}
	public void extragere(float suma) {
		setSuma(this.getSuma()-suma);
		this.setData_ultimei_operatiuni(Calendar.getInstance());
	}

}

class Client{
	String nume;
	String adresa;
	Set<ContBancar> conturi=new HashSet<ContBancar>();
	public Client(String nume, String adresa, ContBancar conturi_) {
		this.nume = nume;
		this.adresa = adresa;
		this.conturi.add(conturi_);
	}
	public void adaugare_cont(ContBancar a) {
		conturi.add(a);
	}
	@Override
	public String toString() {
		return "Nume: "+nume+"  Adresa: "+adresa+"  Conturi: "+conturi.toString();	}

	public String getNume() {
		return nume;
	}
	public String getAdresa() {
		return adresa;
	}
	public Set<ContBancar> getConturi() {
		return conturi;
	}
	public void setNume(String nume) {
		this.nume = nume;
	}
	public void setAdresa(String adresa) {
		this.adresa = adresa;
	}
	public void setConturi(Set<ContBancar> conturi) {
		this.conturi = conturi;
	}

}

class Banca{
	String denumire_banca;
	List<Client> clienti=new  ArrayList<Client>();
	public Banca(String denumire_banca) {
		this.denumire_banca = denumire_banca;
	}
	public void adauga_client(Client a) {
		clienti.add(a);
	}
	@Override
	public String toString() {
		return "Denumire banca: "+denumire_banca+"  Clienti: "+clienti.toString();
	}
	public String getDenumire_banca() {
		return denumire_banca;
	}
	public List<Client> getClienti() {
		return clienti;
	}
	public void setDenumire_banca(String denumire_banca) {
		this.denumire_banca = denumire_banca;
	}
	public void setClienti(List<Client> clienti) {
		this.clienti = clienti;
	}

}


public class ClientiiBancilor {
	public static void main(String[] args) throws IOException {
		Scanner scan=new Scanner(System.in);
		BufferedReader reader= new BufferedReader(new InputStreamReader(System.in));
		int opt, i=0;
		double d1;
		String s1, s2, s3, s4, s5, s6;
		Vector<Banca> banci=new Vector<Banca>();
		Calendar c= Calendar.getInstance();
		//c.set(2021,1,1);
		ContBancar conturiBancare;
		Client cl;
		do {
			System.out.println("0.Iesire");
			System.out.println("1.Introducere Banca.");
			System.out.println("2.Introducere Client.");
			System.out.println("3.Introducere Cont.");
			System.out.println("4.Afisare date introduse.");
			System.out.println("5.Depunere suma.");
			System.out.println("6.Extragere suma.");
			System.out.println("7.Transfer bani intre 2 conturi.");
			System.out.print("Introduceti optiunea dumneavoastra:");
			opt=scan.nextInt();
			Iterator<Banca> it=banci.iterator();

			switch (opt) {
			case 1: 
				System.out.println("Introduceti numele bancii:");
				s1=reader.readLine();
				if(banci.size()==0)
					banci.add(new Banca(s1));
				else {
					for (i=0;i<banci.size();i++)
						if(banci.elementAt(i).getDenumire_banca().equals(s1)) {
							System.out.println("Banca exista deja in sistem!");
							break;
						}
						else {
							banci.add(new Banca(s1));
							break;}
				}
				break;
			case 2:
				int j=0;
				System.out.println("Introduceti nume client:");
				s1=reader.readLine();
				System.out.println("Introduceti adresa client:");
				s2=reader.readLine();
				System.out.println("Introduceti numar cont");
				s3=reader.readLine();
				System.out.println("Introduceti suma depusa initial:");
				d1=scan.nextDouble();
				System.out.println("Introduceti moneda:");
				s4=reader.readLine();
				System.out.println("Introduceti numele bancii la care se va deschide contul:");
				s5=reader.readLine();
				for (i=0;i<banci.size();i++) {
					if(banci.elementAt(i).getDenumire_banca().equals(s5)) {
						banci.elementAt(i).adauga_client(new Client(s1, s2, new ContBancar(s3, d1, s4) ));
						j++;
						break;
					}
				}
				if(j==0) {
					banci.add(new Banca(s5));
					for (i=0;i<banci.size();i++)
						if(banci.elementAt(i).getDenumire_banca().equals(s5)) {
							banci.elementAt(i).adauga_client(new Client(s1, s2, new ContBancar(s3, d1, s4)));
							break;
						}
				}

				break;
			case 3:{int j1, ok1=0, ok2=0;
			System.out.println("Introduceti numele clientului care va deschide un nou cont:");
			s1=reader.readLine();
			System.out.println("Introduceti numele banci la care se va deschide contul:");
			s2=reader.readLine();
			for(i=0;i<banci.size();i++) {
				if(banci.elementAt(i).getDenumire_banca().equals(s2)) {
					ok1++;
					for(j1=0;j1<banci.elementAt(i).clienti.size();j1++)
						if(banci.elementAt(i).clienti.get(j1).getNume().equals(s1)) {
							ok2++;
							if(banci.elementAt(i).clienti.get(j1).conturi.size()>5)
								System.out.println("Maxim 5 conturi admise pentru un client!");
							else {
								System.out.println("Introduceti numar cont:");
								s3=reader.readLine();
								System.out.println("Introduceti suma initiala:");
								d1=scan.nextDouble();
								System.out.println("Introduceti moneda:");
								s4=reader.readLine();
								banci.elementAt(i).clienti.get(j1).conturi.add(new ContBancar(s3, d1, s4));
							}
						}
				}

			}
			if(ok1==0)
			{
				banci.add(new Banca(s2));
				for(i=0;i<banci.size();i++)
					if(banci.elementAt(i).getDenumire_banca().equals(s2)) {
						System.out.println("Introducti adresa client:");
						s5=reader.readLine();
						System.out.println("Introduceti numar cont:");
						s3=reader.readLine();
						System.out.println("Introduceti suma initiala:");
						d1=scan.nextDouble();
						System.out.println("Introduceti moneda:");
						s4=reader.readLine();
						banci.elementAt(i).adauga_client(new Client(s2, s5, new ContBancar(s3, d1, s4)));
					}
				break;
			}
			if(ok2==0) {
				for(i=0;i<banci.size();i++) {
					if(banci.elementAt(i).getDenumire_banca().equals(s2)) {	
						System.out.println("Introducti adresa client:");
						s5=reader.readLine();
						System.out.println("Introduceti numar cont:");
						s3=reader.readLine();
						System.out.println("Introduceti suma initiala:");
						d1=scan.nextDouble();
						System.out.println("Introduceti moneda:");
						s4=reader.readLine();
						banci.elementAt(i).adauga_client(new Client(s2, s5, new ContBancar(s3, d1, s4)));

					}
				}
				break;
			}
			}break;
			case 4:{
				System.out.println("***********Informatii introduse***********");
				for (i=0;i<banci.size();i++)
					System.out.println(banci.elementAt(i).toString());
			}break;
			case 5:{
				System.out.println("Introduceti numele bancii:");
				s1=reader.readLine();
				System.out.println("Introduceti numele clientului:");
				s2=reader.readLine();
				System.out.println("Introduceti numarul contului:");
				s3=reader.readLine();
				System.out.println("Introduceti suma: ");
				d1 = scan.nextFloat();
				for(i=0;i<banci.size();i++) 
				{
					if(banci.elementAt(i).getDenumire_banca().equals(s1)) 
					{
						List<Client> clienti=banci.elementAt(i).getClienti();
						for(j=0;j<banci.elementAt(i).clienti.size();j++)
							if(banci.elementAt(i).clienti.get(j).getNume().equals(s2)) 
							{	
								Set<ContBancar> conturi=clienti.get(j).getConturi();

								Iterator<ContBancar> it1=conturi.iterator();
								while(it1.hasNext())
								{
									ContBancar contu=it1.next();
									if(contu.getNumarCont().equals(s3) )
									{
										contu.depunere((float) d1);
										break;
									}
								}
							}
					}
				}
			}break;
			case 6:{

				System.out.println("Introduceti numele bancii:");
				s1=reader.readLine();
				System.out.println("Introduceti numele clientului:");
				s2=reader.readLine();
				System.out.println("Introduceti numarul contului:");
				s3=reader.readLine();
				System.out.println("Introduceti suma: ");
				d1 = scan.nextFloat();
				for(i=0;i<banci.size();i++) 
				{
					if(banci.elementAt(i).getDenumire_banca().equals(s1)) 
					{
						List<Client> clienti=banci.elementAt(i).getClienti();
						for(int j1 = 0;j1<banci.elementAt(i).clienti.size();j1++)
							if(banci.elementAt(i).clienti.get(j1).getNume().equals(s2)) 
							{	
								Set<ContBancar> conturi=clienti.get(j1).getConturi();

								Iterator<ContBancar> it1=conturi.iterator();
								while(it1.hasNext())
								{
									ContBancar contu=it1.next();
									if(contu.getNumarCont().equals(s3) )
									{
										contu.extragere((float) d1);
										break;
									}
								}
							}
					}
				}
				break;
			}
			case 7:{System.out.println("CONT 1");
			System.out.println("Introduceti numele bancii:");
			s1=reader.readLine();
			System.out.println("Introduceti numele clientului:");
			s2=reader.readLine();
			System.out.println("Introduceti numarul contului:");
			s3=reader.readLine();
			System.out.println("Introduceti suma: ");
			d1 = scan.nextFloat();
			int j1;
			for(i=0;i<banci.size();i++) 
			{
				if(banci.elementAt(i).getDenumire_banca().equals(s1)) 
				{
					List<Client> clienti=banci.elementAt(i).getClienti();
					for(j1=0;j1<banci.elementAt(i).clienti.size();j1++)
						if(banci.elementAt(i).clienti.get(j1).getNume().equals(s2)) 
						{	
							Set<ContBancar> conturi=clienti.get(j1).getConturi();

							Iterator<ContBancar> it1=conturi.iterator();
							while(it1.hasNext())
							{
								ContBancar contu=it1.next();
								if(contu.getNumarCont().equals(s3) )
								{
									contu.extragere((float) d1);
									break;
								}
							}
						}
				}
			}
			System.out.println("CONT 2");
			System.out.println("Introduceti numele bancii:");
			s4=reader.readLine();
			System.out.println("Introduceti numele clientului:");
			s5=reader.readLine();
			System.out.println("Introduceti numarul contului:");
			s6=reader.readLine();

			for(i=0;i<banci.size();i++) 
			{
				if(banci.elementAt(i).getDenumire_banca().equals(s4)) 
				{
					List<Client> clienti=banci.elementAt(i).getClienti();
					for(j1=0;j1<banci.elementAt(i).clienti.size();j1++)
						if(banci.elementAt(i).clienti.get(j1).getNume().equals(s5)) 
						{	
							Set<ContBancar> conturi=clienti.get(j1).getConturi();

							Iterator<ContBancar> it1=conturi.iterator();
							while(it1.hasNext())
							{
								ContBancar contu=it1.next();
								if(contu.getNumarCont().equals(s6) )
								{
									contu.depunere((float) d1);
									break;
								}
							}
						}
				}
			}
			break;
			}
			}

		}while(opt!=0);

		scan.close();
	}
}
